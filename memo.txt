














string(430) "
mul:03; output:01;
int:f2; size:01; 2:02;
int:f2; size:01; 1:01;

ADD:02; output:02; ?:01; INT:f2; size:01; 1:01;
DEV:04; output:03; int:f2; size:01; 2:02;
:f2; :01; :01; :02; :04; :03; :f2; :01; :03; :02; :05; :02; :04; :03; :06; :f2; :01; :05; :f2; :01; :06; :02; :07; :06; :f2; :01; :14; :04; :08; :f2; :01; :02; :07; :04; :09; :f2; :01; :06; :f2; :01; :02; :03; :0a; :f2; :01; :05; :09; :03; :0b; :08; :0a; :05; :0c; :05; :0b; :0c; :0d; :0c; :1f; :f2; :01; :02; :0a; :61; :f0; :31; :33;"



string(490) "

mul:03; output:01;
int:f2; size:01; 2:02;
int:f2; size:01; 1:01;

ADD:02; output:02;
READV:f3; var:01;
int:f2; size:01; 1:01;

dev:04; output:03;
int:f2; size:01; 2:02;
int:f2; size:01; 1:01;

ADD:02; output:04;
READV:f3; var:03;
INT:f2; size:01; 3:03;

ADD:02; output:05;
READV:f3; var:02;
READV:f3; var:04;

Mul:03; output:06;
Int:f2; size:01; 5:05;
Int:f2; size:01; 6:06;


 :02; :07; :f3; :06; :f2; :01; :14; :04; :08; :f2; :01; :02; :f3; :07; :04; :09; :f2; :01; :06; :f2; :01; :02; :03; :0a; :f2; :01; :05; :f3; :09; :03; :0b; :f3; :08; :f3; :0a; :05; :0c; :f3; :05; :f3; :0b; :0c; :0d; :f3; :0c; :1f; :f2; :01; :02; :0a; :61;
 :f0; :31; :33;"

 :03; :01; :f2; :01; :02; :f2; :01; :01; :02; :02; :f3; :01; :f2; :01; :01; :04; :03; :f2; :01; :02; :f2; :01; :01; :02; :04; :f3; :03; :f2; :01; :03; :02; :05; :f3; :02; :f3; :04; :03; :06; :f2; :01; :05; :f2; :01; :06; :02; :07; :f3; :06; :f2; :01; :14; :04; :08; :f2; :01; :02; :f3; :07; :04; :09; :f2; :01; :06; :f2; :01; :02; :03; :0a; :f2; :01; :05; :f3; :09; :03; :0b; :f3; :08; :f3; :0a; :05; :0c; :f3; :05; :f3; :0b; :0c; :0d; :f3; :0c; :1f; :f2; :01; :02; :0a; :61; :f0; :f3; :0d;"


mul:df; output:01;
int:f2; size:01; 2:02;
!!int:f2; :01; :01; :02; :02; :f3; :01; :f2; :01; :01; :04; :03; :f2; :01; :02; :f2; :01; :01; :02; :04; :f3; :03; :f2; :01; :03; :02; :05; :f3; :02; :f3; :04; :df; :06; :f2; :01; :05; :f2; :01; :06; :02; :07; :f3; :06; :f2; :01; :14; :04; :08; :f2; :01; :02; :f3; :07; :04; :09; :f2; :01; :06; :f2; :01; :02; :df; :0a; :f2; :01; :05; :f3; :09;
dev:df; output:0b;
READV:f3; 8:08;
READV:f3; 11:0a;

MINUS:05; 13:0c;
READV:f3; 05:05;
READV:f3; 12:0b;

print:f0; READV:f3; :13:0c;"


I:\Owner\Desktop\php\parser\decoder.php:152:
 :03; :01; :f2; :01; :02; :f2; :01; :01; :02; :02; :f3; :01; :f2; :01; :01; :04; :03; :f2; :01; :02; :f2; :01; :01; :02; :04; :f3; :03; :f2; :01; :03; :02; :05; :f3; :02; :f3; :04; :03; :06; :f2; :01; :05; :f2; :01; :06; :02; :07; :f3; :06; :f2; :01; :14; :04; :08; :f2; :01; :02; :f3; :07; :04; :09; :f2; :01; :06; :f2; :01; :02; :03; :0a; :f2; :01; :05; :f3; :09; :03; :0b; :f3; :08; :f3; :0a; :05; :0c; :f3; :05; :f3; :0b;
 print:f9; READV:f3; 12:0c;"
I:\Owner\Desktop\php\parser\decoder.php:155:

string(490) " :03; :01; :f2; :01; :02; :f2; :01; :01; :02; :02; :f3; :01; :f2; :01; :01; :04; :03; :f2; :01; :02; :f2; :01; :01; :02; :04; :f3; :03; :f2; :01; :03; :02; :05; :f3; :02; :f3; :04; :03; :06; :f2; :01; :05; :f2; :01; :06; :02; :07; :f3; :06; :f2; :01; :14; :04; :08; :f2; :01; :02; :f3; :07; :04; :09; :f2; :01; :06; :f2; :01; :02; :03; :0a; :f2; :01; :05; :f3; :09; :03; :0b; :f3; :08; :f3; :0a; :05; :0c; :f3; :05; :f3; :0b;

CONCAT:0c; output:0d; READV:f3; 12:0c;
String:1f;
Int:f2; size:01; 2:02;
:0a; :61;

print:f9; :f3; :0d;"

:03; :01; :f2; :01; :02; :f2; :01; :01; :02; :02; :f3; :01; :f2; :01; :01; :04; :03; :f2; :01; :02; :f2; :01; :01; :02; :04; :f3; :03; :f2; :01; :03; :02; :05; :f3; :02; :f3; :04; :03; :06; :f2; :01; :05; :f2; :01; :06; :02; :07; :f3; :06; :f2; :01; :14; :04; :08; :f2; :01; :02; :f3; :07; :04; :09; :f2; :01; :06; :f2; :01; :02; :03; :0a; :f2; :01; :05; :f3; :09; :03; :0b; :f3; :08; :f3; :0a; :05; :0c; :f3; :05; :f3; :0b;
:03; :01; :92; :01; :02; :92; :01; :01; :02; :02; :91; :01; :92; :01; :01; :04; :03; :92; :01; :02; :92; :01; :01; :02; :04; :91; :03; :92; :01; :03; :02; :05; :91; :02; :91; :04; :03; :06; :92; :01; :05; :92; :01; :06; :02; :07; :91; :06; :92; :01; :14; :04; :08; :92; :01; :02; :91; :07; :04; :09; :92; :01; :06; :92; :01; :02; :03; :0a; :92; :01; :05; :91; :09; :03; :0b; :91; :08; :91; :0a; :05; :0c; :91; :05; :91; :0b; :02; :0d; :91; :0c; :92; :09; :9a; :99; :99; :99; :99; :99; :1d; :40; :a0; :91; :0d;"

:03; :01; :92; :01; :02; :92; :01; :01; :02; :02; :91; :01; :92; :01; :01; :04; :03; :92; :01; :02; :92; :01; :01; :02; :04; :91; :03; :92; :01; :03; :02; :05; :91; :02; :91; :04; :03; :06; :92; :01; :05; :92; :01; :06; :02; :07; :91; :06; :92; :01; :14; :04; :08; :92; :01; :02; :91; :07; :04; :09; :92; :01; :06; :92; :01; :02; :03; :0a; :92; :01; :05; :91; :09; :03; :0b; :91; :08; :91; :0a; :05; :0c; :91; :05; :91; :0b; :02; :0d; :91; :0c; :92; :09; :9a; :99; :99; :99; :99; :99; :1d; :40; :41; :72; :72; :61; :79; :a0; :91; :0d; :41; :72; :72; :61; :79;"
:03; :01; :92; :01; :02; :92; :01; :01; :02; :02; :91; :01; :92; :01; :01; :04; :03; :92; :01; :02; :92; :01; :01; :02; :04; :91; :03; :92; :01; :03; :02; :05; :91; :02; :91; :04; :03; :06; :92; :01; :05; :92; :01; :06; :02; :07; :91; :06; :92; :01; :14; :04; :08; :92; :01; :02; :91; :07; :04; :09; :92; :01; :06; :92; :01; :02; :03; :0a; :92; :01; :05; :91; :09; :03; :0b; :91; :08; :91; :0a; :05; :0c; :91; :05; :91; :0b; :02; :0d; :91; :0c; :92; :09; :9a; :99; :99; :99; :99; :99; :1d; :40; :41; :72; :72; :61; :79; :a0; :91; :0d; :41; :72; :72; :61; :79;"

array(
    0: Stmt_InlineHTML(
        value:

    )
    1: Stmt_Expression(
        expr: Expr_Assign(
            var: Expr_Variable(
                name: a
            )
            expr: Scalar_LNumber(
                value: 100
            )
        )
    )
    2: Stmt_Echo(
        exprs: array(
            0: Expr_BinaryOp_Plus(
                left: Expr_BinaryOp_Minus(
                    left: Expr_BinaryOp_Plus(
                        left: Expr_BinaryOp_Plus(
                            left: Expr_BinaryOp_Mul(
                                left: Scalar_LNumber(
                                    value: 2
                                )
                                right: Scalar_LNumber(
                                    value: 1
                                )
                            )
                            right: Scalar_LNumber(
                                value: 1
                            )
                        )
                        right: Expr_BinaryOp_Plus(
                            left: Expr_BinaryOp_Div(
                                left: Scalar_LNumber(
                                    value: 2
                                )
                                right: Scalar_LNumber(
                                    value: 1
                                )
                            )
                            right: Scalar_LNumber(
                                value: 3
                            )
                        )
                    )
                    right: Expr_BinaryOp_Mul(
                        left: Expr_BinaryOp_Div(
                            left: Scalar_LNumber(
                                value: 2
                            )
                            right: Expr_BinaryOp_Plus(
                                left: Expr_BinaryOp_Mul(
                                    left: Scalar_LNumber(
                                        value: 5
                                    )
                                    right: Scalar_LNumber(
                                        value: 6
                                    )
                                )
                                right: Scalar_LNumber(
                                    value: 20
                                )
                            )
                        )
                        right: Expr_BinaryOp_Mul(
                            left: Scalar_LNumber(
                                value: 5
                            )
                            right: Expr_BinaryOp_Div(
                                left: Scalar_LNumber(
                                    value: 6
                                )
                                right: Scalar_LNumber(
                                    value: 2
                                )
                            )
                        )
                    )
                )
                right: Scalar_DNumber(
                    value: 7.4
                )
            )
        )
        comments: array(
            0: //echo 1+2*(3/$a*1);
        )
    )
    3: Stmt_If(
        cond: Expr_BinaryOp_Identical(
            left: Expr_ConstFetch(
                name: Name(
                    parts: array(
                        0: true
                    )
                )
            )
            right: Expr_ConstFetch(
                name: Name(
                    parts: array(
                        0: true
                    )
                )
            )
        )
        stmts: array(
            0: Stmt_Echo(
                exprs: array(
                    0: Scalar_String(
                        value: test print
                    )
                )
            )
        )
        elseifs: array(
            0: Stmt_ElseIf(
                cond: Expr_BinaryOp_Identical(
                    left: Scalar_LNumber(
                        value: 1
                    )
                    right: Scalar_LNumber(
                        value: 1
                    )
                )
                stmts: array(
                )
            )
            1: Stmt_ElseIf(
                cond: Expr_BinaryOp_Identical(
                    left: Scalar_LNumber(
                        value: 2
                    )
                    right: Scalar_LNumber(
                        value: 2
                    )
                )
                stmts: array(
                )
            )
        )
        else: null
        comments: array(
            0: //3+5+50
        )
    )
    4: Stmt_Nop(
        comments: array(
            0: /*
            if(1+2===3){

            }else{
            	echo "else_test";
            }


            if(1+5===true){
            	echo "if_test";
            }else if($a === 100){
            	echo "else_test";
            }

            const TEST = "A";
            echo TEST;
            */
        )
    )
)

" WRITEV:32; output:01; Int:93; size:01; 1:01;"



 :03; :01; :93; :01; :02; :93; :01; :01; :02; :02; :91; :01; :93; :01; :01; :04; :03; :93; :01; :02; :93; :01; :01; :02; :04; :91; :03; :93; :01; :03;
 ADD:02; output:05; READV:91; 2:02; READV:91; 4:04; print:a0; READV:91; 05:05;"

 WRITEV:32; output:06; Int:93; size:01; 1:01;

 JMPZ:a2; READV:91; 6:06; Int:93; size:01; 11:11;


   String opcode:94; :93; :01; :0a; :74; :65; :73; :74; :20; :70; :72; :69; :6e; :74; :a0;
   PARINT:91; 6:06;
}

WRITEV:32; output:07; String:94; INT:93; size:01; 11:0a;//0 t:74; e:65; s:73; t:74; :20; p:70; r:72; i:69; t:6e; :74; print:a0; READV:91; 7:07;

 WRITEV:32; output:06; INT:93; SIZE:01; 1:01;
 JMPZ:a2; READV:91; 6:06; INT:93; size:01; 0:00;


cord    WRITEV:32; output:06; Int:93; size:01; 1:01;
if      JMPZ:a2; READV:91; 6:06; INT:93; size:01; 13:19; // === 0 => +13
then    WRITEV:32; output:07; String:94; INT:93; size:01; 11:0a;//0 t:74; e:65; s:73; t:74; :20; p:70; r:72; i:69; t:6e; :74; print:a0; READV:91; 7:07;
//jmp

 :a2; :91; :06; :93; :01; :13; :32; :09; :94; :93; :01; :0a; :74; :65; :73; :74; :20; :70; :72; :69; :6e; :74; :a0; :91; :09;
 :a1; :93; :01; :00;

 :32; :06; :93; :01; :01;
 :a2; :91; :06; :93; :01; :13; :32; :09; :94; :93; :01; :0a; :74; :65; :73; :74; :20; :70; :72; :69; :6e; :74; :a0; :91; :09;
 :a1; :93; :01; :00;

Q. どのようなプログラムにてございますでしょうか...?
A. 「nikic/php-parser」を用いてphpコードのコンパイル(簡易)、
実行マシンの作成(最適化処理に関しましては、行いません。)
(突然の思い付きにより作成中)

実装済み
計算問題のコンパイル、実行
echo ((2*1+1)+(2/1+3)-(2/(5*6+20)*(5*(6/2))))//7.4
echo 1+2*(3/$a*1);

解決済みの問題
String opcode 迷子問題

実装予定
if文、else、elseif、

問題
JMPZ opcodeの仕様について

解決中の問題

<?php
echo "test print"; // String 迷子
?>

ADD?:02; output:00; output:03; INT:93; size:01; 100:64; INT:93; size:02; :c8; :00; WRITEV:92; output:00; output:03; READV:91; var:00; var:00; PRINT:a0; READV:91; var:00; var:03;"






















